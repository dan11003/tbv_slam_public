#!/usr/bin/env python
PACKAGE = "tbv_slam"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

gen.add("replace_cov_by_identity",   bool_t,   0, "Replace Cov. by Identity",  True)
gen.add("odom_vxx", double_t, 0, "Translation scaler",    0.01 , 0,   1)
gen.add("odom_vyy", double_t, 0, "X scaler",  0.01, 0,   1)
gen.add("odom_vtt", double_t, 0, "Y scaler",  0.001, 0,   1)
gen.add("loop_vxx", double_t, 0, "Translation scaler",    0.01, 0,   1)
gen.add("loop_vyy", double_t, 0, "X scaler",  0.01, 0,   1)
gen.add("loop_vtt", double_t, 0, "Y scaler",  0.001, 0,   1)
gen.add("loop_scaling", double_t, 0, "loop scaler",  500000, 0,   1000000)

#gen.add("int_param",    int_t,    0, "An Integer parameter", 50,  0, 100)
#gen.add("double_param", double_t, 0, "A double parameter",    .5, 0,   1)
#gen.add("str_param",    str_t,    0, "A string parameter",  "Hello World")
#gen.add("bool_param",   bool_t,   0, "A Boolean parameter",  True)

#size_enum = gen.enum([ gen.const("Small",      int_t, 0, "A small constant"),
#                       gen.const("Medium",     int_t, 1, "A medium constant"),
#                       gen.const("Large",      int_t, 2, "A large constant"),
#                       gen.const("ExtraLarge", int_t, 3, "An extra large constant")],
#                     "An enum to set size")

#gen.add("size", int_t, 0, "A size parameter which is edited via an enum", 1, 0, 3, edit_method=size_enum)

exit(gen.generate(PACKAGE, "tbv_slam", "OptimizationParams"))
